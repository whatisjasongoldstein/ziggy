{"version":3,"file":"static/webpack/static/development/pages/index.js.9622d60d8e4db34ec2e2.hot-update.js","sources":["webpack:///./components/lazyloaded-image.js"],"sourcesContent":["import { useRef, useEffect, useState } from \"react\";\n\n/**\n * Inspired by https://billyjacoby.dev/intersection-observer-react-hooks\n */\nexport const useIntersectionObserver = ref => {\n  // configure the state\n  const [state, setState] = useState({\n    inView: false,\n    triggered: false\n  });\n\n  // Use this to cache the observer across lifecycles\n  const observerRef = useRef();\n\n  // Obviously this only works in the browser\n  if (process.browser && !observerRef.current) {\n    console.log(\"Observer created\");\n    observerRef.current = new IntersectionObserver(\n      (entries, observerInstance) => {\n        // checks to see if the element is intersecting\n        if (entries[0].intersectionRatio > 0) {\n          // if it is update the state, we set triggered\n          // as to not re-observe the element\n          entries[0];\n          setState({\n            inView: true,\n            triggered: true\n          });\n          // unobserve the element\n          observerInstance.unobserve(ref.current);\n        }\n        return;\n      },\n      {\n        rootMargin: \"500px\"\n      }\n    );\n  }\n\n  useEffect(() => {\n    // check that the element exists, and has not\n    // already been triggered\n    if (observerRef.current && ref.current && !state.triggered) {\n      observerRef.current.observe(ref.current);\n    }\n\n    return function() {\n      observerRef.current.unobserve(ref.current);\n    };\n  });\n\n  return [state.inView];\n};\n\nexport default function LazyLoadedImage({ src, alt }) {\n  const elementRef = useRef(null);\n  const [inView] = useIntersectionObserver(elementRef);\n\n  return (\n    <img\n      ref={elementRef}\n      key={src}\n      className=\"lazyload\"\n      src={inView ? src : \"\"}\n      alt={alt}\n    />\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;AAGA;AACA;AADA;AAGA;AACA;AAFA;AAFA;AAAA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;A","sourceRoot":""}