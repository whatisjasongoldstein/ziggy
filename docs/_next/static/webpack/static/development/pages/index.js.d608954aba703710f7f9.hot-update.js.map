{"version":3,"file":"static/webpack/static/development/pages/index.js.d608954aba703710f7f9.hot-update.js","sources":["webpack:///./components/lazyloaded-image.js"],"sourcesContent":["import { useRef, useEffect, useState, Component } from \"react\";\n\nlet observer;\nconst observerCallbackHandlers = {};\n\n// new IntersectionObserver(\n//   (entries, observerInstance) => {\n//     // checks to see if the element is intersecting\n//     if (entries[0].intersectionRatio > 0) {\n//       // if it is update the state, we set triggered\n//       // as to not re-observe the element\n//       setState({\n//         inView: true,\n//         triggered: true\n//       });\n//       // unobserve the element\n//       observerInstance.unobserve(ref.current);\n//     }\n//     return;\n//   },\n// {\n//   rootMargin: \"500px\"\n// }\n// );\n\nfunction getObserver() {\n  if (!process.browser || observer) {\n    return observer;\n  }\n\n  observer = new IntersectionObserver(\n    (entries, observerInstance) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          console.log(entry);\n          observerCallbackHandlers[entry.target]();\n        }\n      });\n    },\n    {\n      rootMargin: \"500px\"\n    }\n  );\n\n  return observer;\n}\n\n/**\n * Inspired by https://billyjacoby.dev/intersection-observer-react-hooks\n */\nexport const useIntersectionObserver = ref => {\n  // configure the state\n  const [state, setState] = useState({\n    inView: false,\n    triggered: false\n  });\n\n  // Use this to cache the observer across lifecycles\n  const observerInstance = getObserver();\n\n  // Obviously this only works in the browser\n  // if (process.browser && !observerRef.current) {\n  //   console.log(\"Observer created\");\n  //   observerRef.current = new IntersectionObserver(\n  //     (entries, observerInstance) => {\n  //       // checks to see if the element is intersecting\n  //       if (entries[0].intersectionRatio > 0) {\n  //         // if it is update the state, we set triggered\n  //         // as to not re-observe the element\n  //         setState({\n  //           inView: true,\n  //           triggered: true\n  //         });\n  //         // unobserve the element\n  //         observerInstance.unobserve(ref.current);\n  //       }\n  //       return;\n  //     },\n  //     {\n  //       rootMargin: \"500px\"\n  //     }\n  //   );\n  // }\n\n  useEffect(() => {\n    // check that the element exists, and has not\n    // already been triggered\n    if (observerInstance && ref.current && !state.triggered) {\n      observerCallbackHandlers[ref.current] = function() {\n        console.log(ref.current.outerHTML);\n      };\n      observerInstance.observe(ref.current);\n    }\n\n    return function() {\n      if (observerInstance) {\n        observerInstance.unobserve(ref.current);\n      }\n    };\n  });\n\n  return [state.inView];\n};\n\n// export default function LazyLoadedImage({ src, alt }) {\n//   const elementRef = useRef(null);\n//   const [inView] = useIntersectionObserver(elementRef);\n\n//   return (\n//     <img\n//       ref={elementRef}\n//       key={src}\n//       className=\"lazyload\"\n//       src={inView ? src : \"\"}\n//       alt={alt}\n//     />\n//   );\n// }\n\nclass LazyLoadedImage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      inView: false\n    };\n\n    this.elementRef = React.createRef();\n  }\n\n  render() {\n    let { inView } = this.state;\n    const { src, alt } = this.props;\n    inView = true;\n\n    return (\n      <img\n        ref={elementRef}\n        key={src}\n        className=\"lazyload\"\n        src={inView ? src : \"\"}\n        alt={alt}\n      />\n    );\n  }\n}\n\nexport default LazyLoadedImage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAKA;AACA;AAEA;;;;;AAGA;AACA;AADA;AAGA;AACA;AAFA;AAFA;AAAA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAIA;AANA;AAOA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AAxBA;AACA;AA0BA;;;;A","sourceRoot":""}